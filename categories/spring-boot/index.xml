<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot on XLabs</title><link>https://www.xlabs.club/categories/spring-boot/</link><description>Recent content in Spring Boot on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2025 XLabs Club</copyright><lastBuildDate>Thu, 25 Sep 2025 11:21:53 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Javax 和 Jakarta 过渡期兼容方案</title><link>https://www.xlabs.club/blog/javax-jakarta-compatibility/</link><pubDate>Sun, 14 Sep 2025 14:33:23 +0800</pubDate><guid>https://www.xlabs.club/blog/javax-jakarta-compatibility/</guid><description>&lt;h2 id="什么是-jakarta-ee为什么要切换"&gt;什么是 Jakarta EE，为什么要切换&lt;/h2&gt;
&lt;p&gt;Jakarta EE 就是 Java EE 的新名词。这里的 EE 全称是 Enterprise Edition，它是专门为企业级 Java 应用定义的一套规范，与 Java SE (Java Platform, Standard Edition) 相对应。&lt;/p&gt;
&lt;p&gt;Java EE 是从 Java 1.2 版本开始推出的 Java 企业级开发平台，最初的名称是 J2EE (Java 2 Platform, Enterprise Edition)。随着 Java 的发展，它的名称于 Java 1.5 版本时更改为 Java EE (Java Platform, Enterprise Edition)。2009 年 Oracle 收购了 Sun，Java EE 开始由 Oracle 通过 JCP (Java Community Process) 开发和维护。&lt;/p&gt;
&lt;p&gt;直到 2017 年，Oracle 将 Java EE 提交给了 Eclipse 基金会，并命名为 Eclipse Enterprise for Java。然而，&lt;strong&gt;由于&amp;quot;Java&amp;quot;这个名字的商标归 Oracle 所有，Eclipse 基金会无法继续使用 &lt;code&gt;javax.*&lt;/code&gt; 和 &lt;code&gt;java.*&lt;/code&gt;，因此，项目名称改为 Jakarta EE&lt;/strong&gt;。&lt;/p&gt;</description></item><item><title>从 Java 8 升级到 Java 25，踩坑记录、变更评估方法、辅助工具介绍、新特性介绍</title><link>https://www.xlabs.club/blog/migrating-java8-to-java25/</link><pubDate>Thu, 23 May 2024 21:03:11 +0800</pubDate><guid>https://www.xlabs.club/blog/migrating-java8-to-java25/</guid><description>&lt;p&gt;

&lt;img
 src="https://www.xlabs.club/blog/migrating-java8-to-java25/java25_hu_42c3cb3c5a24a2c.webp"
 width="770"
 height="403"
 decoding="async"
 fetchpriority="auto"
 loading="lazy"
 alt="java25-release"title="java25-release"
 id="h-rh-i-0"
&gt;&lt;/p&gt;
&lt;p&gt;虽然 Java 界流行 &lt;strong&gt;你发任你发，我用 Java 8&lt;/strong&gt;。但根据 Azul 组织发布的 &lt;a href="https://www.azul.com/newsroom/azul-2025-state-of-java-survey-report/" target="_blank" rel="noopener"&gt;2025 Java 最新使用报告&lt;/a&gt;
 显示，Java 17 悄悄登上了使用率最高的宝座，Java 21 也紧随其后。
至于新发布的 Java 25， 能不能承担起 &lt;code&gt;Make Java Great Again&lt;/code&gt; 的艰巨任务，还需要时间的考验，让子弹再飞一会。&lt;/p&gt;
&lt;p&gt;

&lt;img
 src="https://www.xlabs.club/blog/migrating-java8-to-java25/java-report_hu_cf024fc5f59d1d32.webp"
 width="1080"
 height="609"
 decoding="async"
 fetchpriority="auto"
 loading="lazy"
 alt="java-report"title="java-report"
 id="h-rh-i-1"
&gt;&lt;/p&gt;
&lt;p&gt;今天我们将介绍下，从 Java 8 到 Java 25，有哪些新特性，有什么工具可协助升级，以及在升级过程中遇到的问题和解决办法。&lt;/p&gt;
&lt;h2 id="令人心动的特性"&gt;令人心动的特性&lt;/h2&gt;
&lt;p&gt;下图展示了自 Java 8 以来每个 Java 版本中的 JEP（JDK Enhancement Proposal，即 JDK 增强提案） 数量，下面将摘出几个比较令人心动且使用频率较高的特性进行介绍。&lt;/p&gt;
&lt;p&gt;

&lt;img
 src="https://www.xlabs.club/blog/migrating-java8-to-java25/java-jep_hu_4ab27b0d4e441598.webp"
 width="1724"
 height="970"
 decoding="async"
 fetchpriority="auto"
 loading="lazy"
 alt="java-jep"title="java-jep"
 id="h-rh-i-2"
&gt;&lt;/p&gt;
&lt;h3 id="语法糖"&gt;语法糖&lt;/h3&gt;
&lt;p&gt;语法糖特性让代码编写更加简洁优雅，提升开发体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集合 &amp;amp;&amp;amp; Stream API 增强&lt;/strong&gt; - Java 8/9/12/16/21&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java 8 引入 Stream API，支持函数式数据处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 9 新增 &lt;code&gt;dropWhile()&lt;/code&gt;、&lt;code&gt;takeWhile()&lt;/code&gt;、&lt;code&gt;iterate()&lt;/code&gt; 增强、&lt;code&gt;ofNullable()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 12 新增 &lt;code&gt;Collectors.teeing()&lt;/code&gt; 方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 16 新增 &lt;code&gt;Stream.toList()&lt;/code&gt; 和 &lt;code&gt;mapMulti()&lt;/code&gt; 方法&lt;/p&gt;</description></item><item><title>Spring Boot Start 脚手架定制开发和快速入门</title><link>https://www.xlabs.club/blog/spring-boot-start-site/</link><pubDate>Sat, 09 Mar 2024 14:29:03 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-boot-start-site/</guid><description>&lt;p&gt;介绍基于 &lt;code&gt;start.spring.io&lt;/code&gt; 快速定制自己的 Spring Boot 脚手架，主要应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;规范公司自己的 parent pom，增加特定的依赖项。&lt;/li&gt;
&lt;li&gt;根据公司规范生成统一的包结构，统一命名。&lt;/li&gt;
&lt;li&gt;根据需要增加特定代码或文件，比如根据公司要求统一 logback.xml、 application.properties 文件。&lt;/li&gt;
&lt;li&gt;提供公司自研的二方 jar 包。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="快速开始"&gt;快速开始&lt;/h2&gt;
&lt;p&gt;基本步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于 &lt;a href="https://github.com/spring-io/initializr" target="_blank" rel="noopener"&gt;spring.initializr&lt;/a&gt;
 我们没有定制的需求，直接引用官方的。&lt;/li&gt;
&lt;li&gt;拷贝一份 &lt;a href="https://github.com/spring-io/start.spring.io" target="_blank" rel="noopener"&gt;start.spring.io&lt;/a&gt;
，直接基于这个项目开发、部署、运行。以下都是关于如何修改 &lt;code&gt;start.spring.io&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;start.spring.io&lt;/code&gt; 主要关注两个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start-client：前端页面，可以定制些自己的 logo、title 等。&lt;/li&gt;
&lt;li&gt;start-site：是一个标准的 spring boot 项目，实际 run 起来的服务，引用了 start-client，直接 run 这个项目的 main 方法就能看到效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要配置文件：&lt;code&gt;start-site/src/main/resources/application.yml&lt;/code&gt;，通过修改这个配置文件可以达到的效果如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改 start 启动时默认 group，把 &lt;code&gt;com.example&lt;/code&gt; 改为公司自己的 group。&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;initializr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;group-id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;com.yourgroup&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改父 pom，使用公司自己的 pom。&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;initializr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;maven&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# use your parent pom&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;groupId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;com.yourself&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;artifactId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;your-parent&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1.0.0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# relativePath: ../pom.xml&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;includeSpringBootBom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限定 Java 和 Spring Boot 版：修改 languages 和 bootVersions 即可。&lt;/p&gt;</description></item><item><title>Spring Boot 使用 Micrometer 集成 Prometheus 监控，5 分钟接入自定义监控指标</title><link>https://www.xlabs.club/blog/spring-boot-micrometer/</link><pubDate>Mon, 07 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-boot-micrometer/</guid><description>&lt;p&gt;Spring Boot 使用 Micrometer 集成 Prometheus 监控，5 分钟接入自定义监控指标，主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Micrometer 介绍。&lt;/li&gt;
&lt;li&gt;业务如何自定义指标，如何接入 Prometheus，实现方式和规范。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="micrometer-介绍"&gt;Micrometer 介绍&lt;/h2&gt;
&lt;p&gt;Micrometer 为 Java 平台上的性能数据收集提供了一个通用的 API，应用程序只需要使用 Micrometer 的通用 API 来收集性能指标，Micrometer 会负责完成与不同监控系统的适配工作。&lt;/p&gt;
&lt;p&gt;Micrometer 提供了多种度量指标类型（Timers、Guauges、Counters 等），同时支持接入不同的监控系统，例如 Influxdb、Graphite、Prometheus、OTLP 等。&lt;/p&gt;
&lt;p&gt;从 Spring Boot 2.x 开始使用 Micrometer 作为默认的监控门面接口， &lt;code&gt;Think SLF4J, but for observability&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id="micrometer-核心概念"&gt;Micrometer 核心概念&lt;/h3&gt;
&lt;p&gt;Micrometer 中两个最核心的概念：计量器注册表 (MeterRegistry)，计量器 (Meter)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MeterRegistry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存注册表 (SimpleMeterRegistry): 在内存中保存每一个 Meter（指标）的最新值，并且不会将数据导出到任何地方。&lt;/li&gt;
&lt;li&gt;组合注册表 (CompositeMeterRegistry): 可以添加多个注册表，用于将各个注册表组合起来，可以同时将指标发布到多个监控系统。Micrometer 提供了一个全局的 MeterRegistry，&lt;code&gt;io.micrometer.core.instrument.Metrics&lt;/code&gt; 中持有一个静态 final 的 CompositeMeterRegistry 实例 globalRegistry。&lt;/li&gt;
&lt;li&gt;普罗米修斯注册表 (PrometheusMeterRegistry): 当使用普罗米修斯监控时，引入 micrometer-registry-prometheus 依赖时会提供此种收集器，用于将指标数据转换为普罗米修斯识别的格式和导出数据等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meter（指标）&lt;/p&gt;
&lt;p&gt;监控数据的整个过程都是围绕着 Meter（指标）, 通过一个一个的 Meter（指标）数据来进行观察应用的状态。常用的指标如：&lt;/p&gt;</description></item></channel></rss>