<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>卫星实验室 on XLabs</title><link>https://www.xlabs.club/</link><description>Recent content in 卫星实验室 on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2025 XLabs Club</copyright><lastBuildDate>Fri, 19 Sep 2025 19:17:21 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://www.xlabs.club/docs/cloud/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/cloud/introduction/</guid><description>&lt;p&gt;云原生技术探索。&lt;/p&gt;</description></item><item><title>Introduction</title><link>https://www.xlabs.club/docs/guides/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/guides/introduction/</guid><description>&lt;p&gt;卫星实验室，一个专注于技术创新的开源组织。&lt;/p&gt;
&lt;p&gt;此项目为卫星实验室主页 &lt;a href="https://www.xlabs.club" target="_blank" rel="noopener"&gt;xlabs.club&lt;/a&gt;
 的源码，在这里将分享我们的平台工程实践经验，介绍如何以技术驱动业务长期发展和高速增长。&lt;/p&gt;
&lt;p&gt;欢迎提交 PR 进行开源共建。&lt;/p&gt;
&lt;h2 id="主页内容"&gt;主页内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;平台工程：我们的平台工程建设之路，关于 DevOps, DataOps, FinOps 以及 AIOps 的工程实践。&lt;/li&gt;
&lt;li&gt;云原生：云原生技术探索，如何以云原生技术支撑起不断变化的复杂业务。&lt;/li&gt;
&lt;li&gt;技术博客：研发踩坑记录，翻一翻总有惊喜。&lt;/li&gt;
&lt;li&gt;awesome-x-ops：一些关于 AIOps、DataOps、DevOps、GitOps、FinOps 的优秀软件、博客、配套工具。&lt;/li&gt;
&lt;li&gt;xlabs-ops：一些 IaC 运维脚本和通用模板，如 Argo Workflows 模板仓库，是对官方 Examples 的组合、扩展。&lt;/li&gt;
&lt;li&gt;xlabs-developer-platform：一个基于 Backstage 自建的开发者平台。&lt;/li&gt;
&lt;li&gt;backstage-plugins：卫星实验室的开源 backstage plugins，欢迎提交 PR。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="license"&gt;License&lt;/h2&gt;
&lt;p&gt;本文档采用 &lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener"&gt;CC BY-NC 4.0&lt;/a&gt;
 许可协议。&lt;/p&gt;</description></item><item><title>Kubernetes</title><link>https://www.xlabs.club/docs/tldr/kubernetes/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/tldr/kubernetes/</guid><description>&lt;p&gt;常用 Kubernetes 命令，复制，粘贴，这就是生活。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;复制 secret 到另一个 namespace。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl get secret mys --namespace&lt;span class="o"&gt;=&lt;/span&gt;na -oyaml &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="s1"&gt;&amp;#39;^\s*namespace:\s&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; kubectl apply --namespace&lt;span class="o"&gt;=&lt;/span&gt;nb -f -&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;批量删除 pod。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl get pods --all-namespaces &lt;span class="p"&gt;|&lt;/span&gt; grep Evicted &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2 &amp;#34; --namespace=&amp;#34; $1}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs kubectl delete pod
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Delete by label&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl delete pod -n idaas-book -l app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;idaas-book&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;原地重启 Pod。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl rollout restart deploy/xxx -n your-namespace&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;命令行快速扩缩容。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# kubectl scale -h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl scale --replicas&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; deploy/xxx -n your-namespace&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;密钥解密。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; kubectl get secret my-creds -n mysql -o &lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;{.data.ADMIN_PASSWORD}&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 --decode&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;合并多个 kube config 文件。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KUBECONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.kube/config:~/.kube/anotherconfig
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl config view --flatten &amp;gt; ~/.kube/config-all
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cp ~/.kube/config-all ~/.kube/config
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 顺手把权限改了，避免 helm 或 kubectl 客户端 warning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;chmod &lt;span class="m"&gt;600&lt;/span&gt; ~/.kube/config&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取某个 namespace 下的全部资源，找出你看不见的资源，常用于 webhook/CR/CRD 等资源清理，解决强制删除失败。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your-namespace
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; resource in &lt;span class="sb"&gt;`&lt;/span&gt;kubectl api-resources --verbs&lt;span class="o"&gt;=&lt;/span&gt;list --namespaced -o name &lt;span class="p"&gt;|&lt;/span&gt; xargs -n &lt;span class="m"&gt;1&lt;/span&gt; kubectl get -o name -n &lt;span class="nv"&gt;$ns&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; kubectl get &lt;span class="nv"&gt;$resource&lt;/span&gt; -n &lt;span class="nv"&gt;$ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# kubectl patch $resource -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;finalizers&amp;#34;: []}}&amp;#39; --type=&amp;#39;merge&amp;#39; -n $ns;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;根据特定字段排序 Pod 列表。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame is-terminal not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 根据重启次数排序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;kubectl get pods --sort-by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.status.containerStatuses[0].restartCount&amp;#39;&lt;/span&gt; -A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;</description></item><item><title>总体架构</title><link>https://www.xlabs.club/docs/platform/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/platform/introduction/</guid><description>&lt;p&gt;我们的平台工程建设之路，介绍前期方案设计、中间踩坑历程。&lt;/p&gt;
&lt;h2 id="原则"&gt;原则&lt;/h2&gt;
&lt;p&gt;分享我们平台工程建设的一些基本原则。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以开发者为中心：赋能开发者，了解困难，解决问题，让开发者生活更轻松。&lt;/li&gt;
&lt;li&gt;自动化：自动化手动和重复性任务，减少人为错误，提高效率。&lt;/li&gt;
&lt;li&gt;标准化：标准化保持一致性，减少复杂性，减少团队认知负载，提供最佳实践和统一的编码结构。&lt;/li&gt;
&lt;li&gt;模块化：松耦合且独立的模块，可独立开发、测试和部署。&lt;/li&gt;
&lt;li&gt;弹性：可扩展水平扩缩容的能力，以及容错抗脆弱的能力。&lt;/li&gt;
&lt;li&gt;安全：相比于微服务、云原生领域的安全，在平台工程里，更强调代码、基础设施、数据和其他资源的安全。&lt;/li&gt;
&lt;li&gt;协作：平台工程师、开发人员、运维运营人员以及其他参与者之间的协作，提高生产力、促进创新并创造积极包容的工作环境。&lt;/li&gt;
&lt;li&gt;持续改进：持续性反馈、评估、改进。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="架构概述"&gt;架构概述&lt;/h2&gt;
&lt;p&gt;为便于理解，我们仍然按照惯用架构模型，将架构分为 IaaS、CaaS、PaaS、Applications 这几个层级。&lt;/p&gt;
&lt;p&gt;专业的运维人员作为 platform engineer 着重于 IaaS、CaaS、PaaS 建设，开发人员作为 application engineer 更专注于 PaaS、Applications 建设，为开发和运维提供工具、协作平台、基础应用。&lt;/p&gt;
&lt;div class="mermaid text-center"&gt;
C4Context
 title 平台工程总体架构

 Boundary(users, "Users", "用户接入") {
 Person(superAdmin, "超级管理员")
 Person(admin, "平台管理员")
 Person(developer, "开发人员")
 Person(maintenance, "运维人员")
 }

 Boundary(console, "Console", "开发者平台") {
 Container(backstage, "Backstage","react","开发者门户")
 Container(apps, "应用管理平台","Application","容器管理、应用管理、配置管理、自动化测试")
 Container(ops, "统一运维平台","x-ops","数据库、中间件、日志、监控告警平台")
 Container(iam, "IAM", "Keycloak", "统一用户、组织、角色权限管理")
 }

 Boundary(paas, "PaaS", "PaaS") {
 ContainerDb(rds, "RDS", "PostgreSQL/MySQL", "PostgreSQL、MySQL 等关系型数据库")
 ContainerDb(clickhouse, "ClickHouse", "ClickHouse", "BI、Logging、Metrics 等列式数据库")
 ContainerDb(nosql, "NoSQL", "NoSQL", "ES、Redis、Mongo 等缓存数据库、文档数据库")
 ContainerDb(mq, "消息队列", "Kafka", "Kafka、RocketMQ 等消息队列")
 }

 Boundary(caas, "CaaS", "CaaS") {
 Container(k8s, "Kubernetes","k8s","K8S 容器平台")
 Container(workflow, "编排引擎","Argo","流水线，流程、应用编排引擎")
 Container(kms, "KMS","HashiCorp Vault","秘钥管理系统")
 Container(harbor, "Harbor","harbor","容器镜像仓库")
 Container(git, "IaC","GitLab","IaC、GitOps 源码仓库")
 }

 Boundary(iaas, "IaaS", "IaaS") {
 Container(vm, "云主机","vm","云主机自带本地存储")
 Container(cbh, "堡垒机","cbh","安全运维审计堡垒机")
 Container(s3, "S3","S3/Minio","分布式对象存储")
 Container(nfs, "NFS","nfs","共享文件存储")
 }

 UpdateLayoutConfig($c4ShapeInRow="4", $c4BoundaryInRow="1")
&lt;/div&gt;

&lt;h2 id="基础设施标准化"&gt;基础设施标准化&lt;/h2&gt;
&lt;p&gt;基础设施标准化是平台工程建设的第一步，通过对基础设施服务进行标准化，减少开发人员和运维团队之间的摩擦，减少运维难度，大大降低出错的概率。&lt;/p&gt;</description></item><item><title>统一身份认证</title><link>https://www.xlabs.club/docs/platform/iam/</link><pubDate>Tue, 19 Dec 2023 22:26:42 +0800</pubDate><guid>https://www.xlabs.club/docs/platform/iam/</guid><description>&lt;p&gt;统一身份认证（Identity and Access Management，身份认证和访问控制，简称 IAM）的技术选型和实践。&lt;/p&gt;
&lt;h2 id="核心需求"&gt;核心需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;集中管理：从一个地方管理账户和身份。&lt;/li&gt;
&lt;li&gt;单点登录：允许用户使用一组凭据访问所有集成的系统和应用，避免记忆多个用户名和密码。&lt;/li&gt;
&lt;li&gt;动态访问控制：基于角色和策略动态授予或撤销访问权限。&lt;/li&gt;
&lt;li&gt;审计与合规：记录和监控访问活动，以支持合规性审计。&lt;/li&gt;
&lt;li&gt;无缝快速集成：作为平台工程的一部分更强调“自助”，各个应用能够无缝快速接入，甚至有些应用只需要简单的权限能够不需要开发自动接入。&lt;/li&gt;
&lt;li&gt;强化认证机制：采用多因素认证（MFA：OTP 口令、指纹、短信验证码等）方法，为重要操作增加额外防护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="技术选项"&gt;技术选项&lt;/h2&gt;
&lt;p&gt;为满足以上需求，在初期技术选项时主要关注以下几个开源组件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/keycloak/" target="_blank" rel="noopener"&gt;keycloak&lt;/a&gt;
: 全面的 IAM 解决方案 ，实现用户、权限管理，单点登录、MFA 等。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dexidp" target="_blank" rel="noopener"&gt;Dex&lt;/a&gt;
: 身份代理，连接多个身份源，仅作为 OpenID Connect。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ory/" target="_blank" rel="noopener"&gt;Ory&lt;/a&gt;
: 包含多个独立的组件，组成一个全家桶的解决方案。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oauth2-proxy" target="_blank" rel="noopener"&gt;oauth2-proxy&lt;/a&gt;
: 反向代理工具，专为提供 OAuth 2.0 身份验证和授权服务而设计，附带基于用户、分组、角色的权限管理。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pomerium/" target="_blank" rel="noopener"&gt;Pomerium&lt;/a&gt;
: Pomerium 不仅仅是一个 OAuth 2.0 代理，它还提供了细粒度的访问控制，能够根据用户、组、和其他上下文属性来决定访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下为 keycloak 和 Dex 的简单对比。为什么不把 Ory 加进来，因为没有实际用过，不便于发表意见，如果你是一个 Ory 用户欢迎补充。&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;特性/工具&lt;/th&gt;
 &lt;th&gt;Keycloak&lt;/th&gt;
 &lt;th&gt;Dex&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;全面的 IAM 解决方案&lt;/td&gt;
 &lt;td&gt;身份代理&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;支持内置用户管理&lt;/td&gt;
 &lt;td&gt;不直接管理用户，依赖外部身份提供者&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;协议支持&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;OpenID Connect、OAuth 2.0、SAML 2.0&lt;/td&gt;
 &lt;td&gt;OpenID Connect&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;SSO&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;支持&lt;/td&gt;
 &lt;td&gt;依赖外部身份提供者实现&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;社交登录&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;支持多种社交登录选项&lt;/td&gt;
 &lt;td&gt;不直接支持，可通过连接外部身份提供者实现&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;角色管理&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;支持复杂的角色和权限管理&lt;/td&gt;
 &lt;td&gt;不直接支持&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;高，适合各种规模和复杂性的需求&lt;/td&gt;
 &lt;td&gt;适合将多个身份源统一到一个认证流程的环境&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;需要全面、集中式身份管理的组织&lt;/td&gt;
 &lt;td&gt;需要统一多个身份源认证，如在云原生环境中&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;用户界面&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;提供丰富的用户和管理员界面&lt;/td&gt;
 &lt;td&gt;主要是 API，没有详细的用户界面&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;适用性&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;适用于需要完整 IAM 解决方案的组织&lt;/td&gt;
 &lt;td&gt;适用于作为多个身份源代理，尤其在 Kubernetes 环境中&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下为 OAuth2 Proxy 和 Pomerium 的简单对比。&lt;/p&gt;</description></item><item><title>Javax 和 Jakarta 过渡期兼容方案</title><link>https://www.xlabs.club/blog/javax-jakarta-compatibility/</link><pubDate>Sun, 14 Sep 2025 14:33:23 +0800</pubDate><guid>https://www.xlabs.club/blog/javax-jakarta-compatibility/</guid><description>&lt;h2 id="什么是-jakarta-ee为什么要切换"&gt;什么是 Jakarta EE，为什么要切换&lt;/h2&gt;
&lt;p&gt;Jakarta EE 就是 Java EE 的新名词。这里的 EE 全称是 Enterprise Edition，它是专门为企业级 Java 应用定义的一套规范，与 Java SE (Java Platform, Standard Edition) 相对应。&lt;/p&gt;
&lt;p&gt;Java EE 是从 Java 1.2 版本开始推出的 Java 企业级开发平台，最初的名称是 J2EE (Java 2 Platform, Enterprise Edition)。随着 Java 的发展，它的名称于 Java 1.5 版本时更改为 Java EE (Java Platform, Enterprise Edition)。2009 年 Oracle 收购了 Sun，Java EE 开始由 Oracle 通过 JCP (Java Community Process) 开发和维护。&lt;/p&gt;
&lt;p&gt;直到 2017 年，Oracle 将 Java EE 提交给了 Eclipse 基金会，并命名为 Eclipse Enterprise for Java。然而，&lt;strong&gt;由于&amp;quot;Java&amp;quot;这个名字的商标归 Oracle 所有，Eclipse 基金会无法继续使用 &lt;code&gt;javax.*&lt;/code&gt; 和 &lt;code&gt;java.*&lt;/code&gt;，因此，项目名称改为 Jakarta EE&lt;/strong&gt;。&lt;/p&gt;</description></item><item><title>CI: Maven 如何在编译时禁止调用某些特定 API</title><link>https://www.xlabs.club/blog/ci-maven-forbidden-api/</link><pubDate>Tue, 09 Sep 2025 22:18:59 +0800</pubDate><guid>https://www.xlabs.club/blog/ci-maven-forbidden-api/</guid><description>&lt;p&gt;在日常开发中，我们经常遇到类似如下需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目组提供了 SDK，某个 API 已经被标记为废弃，但是大家迟迟不升级，项目组还需要花费时间维护已经废弃的 API。&lt;/li&gt;
&lt;li&gt;有些项目在使用 JDK 已经废弃的 API，这些废弃 API 在更高版本 JDK 中已经删除，导致推动升级 JDK 比较困难。&lt;/li&gt;
&lt;li&gt;有些项目会跨版本混合编译，比如用 Java 8 编译运行在 Java 21 上，常见的错误比如 &lt;code&gt;javafx.util&lt;/code&gt; 在 Java 21 默认已经去掉了，就会出现编译成功却运行时失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们想提供一种方案，能不能在编译期就强制禁用某些 API，主动阻止让编译不通过，提前报错及早发现及早处理。&lt;/p&gt;
&lt;h2 id="实现方案"&gt;实现方案&lt;/h2&gt;
&lt;p&gt;当前我们使用 maven &lt;a href="https://github.com/policeman-tools/forbidden-apis" target="_blank" rel="noopener"&gt;forbiddenapis&lt;/a&gt;
 插件，结合 CI 流程来实现。&lt;/p&gt;
&lt;p&gt;执行效果，如果有使用禁用的 API，能看到类似如下错误提示，编译失败并给出原因。&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.647 [INFO]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.648 [INFO] --- forbiddenapis:3.9:check (check-forbidden-apis) @ app-biz ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.657 [INFO] Scanning for classes to check...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.661 [INFO] Reading bundled API signatures: jdk-deprecated-1.8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.694 [INFO] Reading API signatures: /usr/share/maven/conf/forbidden-apis.txt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.694 [INFO] Loading classes to check...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.695 [INFO] Scanning classes for violations...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.849 [ERROR] Forbidden class/interface use: javafx.util.Pair [禁止使用 JavaFX 相关类]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.850 [ERROR] in com.tester.HomeController (HomeController.java:11)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.865 [ERROR] Scanned 13 class file(s) for forbidden API invocations (in 0.21s), 1 error(s).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;12:40:30.872 [INFO] ------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="go"&gt;24784 [INFO] --- forbiddenapis:3.9:check (check-forbidden-apis) @ app-api ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;24812 [INFO] Scanning for classes to check...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;24884 [INFO] Reading bundled API signatures: jdk-deprecated-1.8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;25016 [INFO] Reading API signatures: /usr/share/maven/conf/forbidden-apis.txt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;25017 [INFO] Loading classes to check...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;25106 [INFO] Scanning classes for violations...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;25984 [ERROR] Forbidden method invocation: java.net.URLEncoder#encode(java.lang.String) [Deprecated in Java 1.8]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;25984 [ERROR] in com.tester.FormBody$FormBodyBuilder (FormBody.java:60)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;26110 [ERROR] Scanned 660 class file(s) for forbidden API invocations (in 1.31s), 2 error(s).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;26113 [INFO]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id="maven-核心配置"&gt;Maven 核心配置&lt;/h3&gt;
&lt;p&gt;首先，在父 pom 里增加了以下片段，此内容主要含义：&lt;/p&gt;</description></item><item><title>Spring Security 集成 Keycloak 实现用户 RBAC、ABAC 授权</title><link>https://www.xlabs.club/blog/spring-security-with-keycloak-oauth2/</link><pubDate>Sun, 24 Nov 2024 16:44:35 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-security-with-keycloak-oauth2/</guid><description>&lt;p&gt;使用 Spring Security Resource Server 和 Keycloak，实现用户 RBAC、ABAC 授权，主要介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Security Resource Server 如何与标准 OAuth2 协议集成。&lt;/li&gt;
&lt;li&gt;Spring Security Resource Server 如何与 Keycloak Authorization Server 集成。&lt;/li&gt;
&lt;li&gt;如何校验和解析 JWT Token，获取用户详细信息。&lt;/li&gt;
&lt;li&gt;如何使用 keycloak admin client 获取更多信息，执行更高级动作。&lt;/li&gt;
&lt;li&gt;Spring Security JWT Token 模式下如何方便本地 Debug，如何通过 keycloak admin client 模拟用户登录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在开始之前我们先解释几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keycloak 官方的 Spring Boot Starter 后续将逐渐停止维护，所以我们只用 keycloak 的 client，自己实现一部分代码，有 client sdk 实现起来很容易。&lt;/li&gt;
&lt;li&gt;Spring Security &lt;a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html" target="_blank" rel="noopener"&gt;OAuth 2.0 Resource Server&lt;/a&gt;
 也有多种集成方式，这里我们只实现 &lt;code&gt;JWT&lt;/code&gt; 这一种，并且是 sessionless 的，也就是只负责授权不负责 &lt;code&gt;登录认证&lt;/code&gt;， 登录由网关通过 oauth2-proxy 实现，详情可参考另一篇博客介绍 &lt;a href="https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/" target="_blank" rel="noopener"&gt;traefik-oauth2-proxy-keycloak&lt;/a&gt;
。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Backstage 集成 oauth2-proxy 和 Keycloak，实现用户管理、登录认证以及 RBAC、ABAC 授权</title><link>https://www.xlabs.club/blog/backstage-keycloak-oauth2-proxy/</link><pubDate>Sat, 16 Nov 2024 16:55:26 +0800</pubDate><guid>https://www.xlabs.club/blog/backstage-keycloak-oauth2-proxy/</guid><description>&lt;p&gt;基于 K8S 部署 Backstage，集成 oauth2-proxy 和 Keycloak，实现用户管理、认证和授权，配置详解和原理介绍。&lt;/p&gt;
&lt;p&gt;如果你遇到以下问题或诉求，可以参考此文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://backstage.io/" target="_blank" rel="noopener"&gt;Backstage&lt;/a&gt;
 接入 oauth2-proxy，登录或认证失败。&lt;/li&gt;
&lt;li&gt;Backstage 实现 RBAC、ABAC 授权管理，以及如何实现自定义权限。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/" target="_blank" rel="noopener"&gt;oauth2-proxy&lt;/a&gt;
 对接 keycloak，参数不理解或者配置一直错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开始之前，我们先了解一个点，Backstage 官方开源有开箱即用的容器镜像，也有丰富的插件生态，然而区别于其他插件类应用，Backstage 有自己的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Backstage 插件分为 frontend 和 backend，一个完整的插件可能包含两种，也可能只包含其中一种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源发布的开箱即用的容器镜像，只包含基础插件，一般只用来作为初次学习使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想使用其他插件，需要做一些编码工作，一般步骤如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;npx @backstage/create-app@latest&lt;/code&gt; 创建一个基础项目。&lt;/li&gt;
&lt;li&gt;按插件要求安装插件，配置插件菜单、UI 效果、权限、认证信息等，每个插件要求不同。&lt;/li&gt;
&lt;li&gt;按需开发自己的插件。&lt;/li&gt;
&lt;li&gt;编译成新容器镜像，某些插件可能还需要在容器中额外安装一些依赖包，部署时使用此容器镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本上每个插件都有自己的配置要求，需根据插件文档配置 app-config.yaml。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以把 Backstage 类比于 Spring Boot，提供了 starter、framework、plugins，如果想真实使用，需要自己引入依赖，编译成自己的镜像发布部署，欢迎 star 我们基于 Backstage 定制的开源项目 &lt;a href="https://github.com/xlabs-club/xlabs-developer-platform" target="_blank" rel="noopener"&gt;xlabs-developer-platform&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;核心组件介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户同步使用 Red Hat 贡献的社区开源插件 &lt;a href="https://github.com/backstage/community-plugins/tree/main/workspaces/keycloak/plugins/catalog-backend-module-keycloak" target="_blank" rel="noopener"&gt;@backstage-community/plugin-catalog-backend-module-keycloak&lt;/a&gt;
，将 keycloak 用户同步到 Backstage 数据库，后面我们会提到为什么需要这一步。&lt;/li&gt;
&lt;li&gt;认证使用官方内置的 &lt;a href="https://backstage.io/docs/auth/oauth2-proxy/provider" target="_blank" rel="noopener"&gt;OAuth 2 Proxy Provider&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;授权，权限管理 Permissions，支持 RBAC、ABAC， 使用 Red Hat 贡献的社区开源插件 &lt;a href="https://github.com/backstage/community-plugins/tree/main/workspaces/rbac/plugins" target="_blank" rel="noopener"&gt;@backstage-community/plugin-rbac&lt;/a&gt;
，虽然插件名字叫 RBAC，但是实际上支持 ABAC。注意 Spotify 也有 &lt;a href="https://backstage.spotify.com/marketplace/spotify/plugin/rbac/" target="_blank" rel="noopener"&gt;RBAC 插件&lt;/a&gt;
 需要购买 License 才能用，两个插件别弄混了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上认证和授权是独立的，如果你只需要认证，不需要授权，那可以不需要 RBAC 插件。&lt;/p&gt;</description></item><item><title>使用 oauth2-proxy 为任意程序增加认证鉴权，结合 K8S、traefik、keycloak 部署配置详解</title><link>https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/</link><pubDate>Thu, 10 Oct 2024 23:30:40 +0800</pubDate><guid>https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/</guid><description>&lt;p&gt;作为一个程序员，在日常开发中永远避免不了认证鉴权，而我们开发的某些应用，并不需要太复杂的鉴权，比如可能只要求必须是登录用户，或者只需要根据角色进行 RBAC 鉴权。有没有方法简化此流程，让应用开发者只关注业务开发，这就是本文档要解决的问题。&lt;/p&gt;
&lt;p&gt;如果你有类似以下的需求，都可以参考此文档，原理是一样的，组件也可复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为原本没有登录验证的服务提供认证服务，比如某些开源组件不支持认证但是又因携带一些危险数据而不想公开访问。&lt;/li&gt;
&lt;li&gt;实现统一的单点登录 SSO、并支持简单的 RBAC、UBAC 鉴权。&lt;/li&gt;
&lt;li&gt;为 Kubernetus Traefik Nginx Ingress 提供统一的认证入口，一键实现所有入口必须登录才可访问。&lt;/li&gt;
&lt;li&gt;配置 Traefik 使用 Forward Auth，Nginx 使用 auth_request 实现认证，也可以一并参考。&lt;/li&gt;
&lt;li&gt;在 K8S 或应用网关，基于用户、角色等不同属性，路由到不同服务。&lt;/li&gt;
&lt;li&gt;如果你凑巧也在用 &lt;a href="https://backstage.io/" target="_blank" rel="noopener"&gt;Backstage&lt;/a&gt;
，请参考 &lt;a href="https://www.xlabs.club/blog/backstage-oauth2-proxy-keycloak/" target="_blank" rel="noopener"&gt;另一篇博客&lt;/a&gt;
。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写在前面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本文档里的示例代码是以 k3s 为基础，使用 traefik 作为 ingress controller，整体完善但略显复杂，如果没有 K3S/K8S，以其他方式部署也是完全可以的，基本原理都是一样的。&lt;/li&gt;
&lt;li&gt;对于某些场景下可选的配置，会单独说明，请注意分别。&lt;/li&gt;
&lt;li&gt;这里提到的每个组件都是可替换的，比如 nginx 代替 traefik，Pomerium 代替 oauth2-proxy，可根据爱好选择，后面也会适当补充几种不同方式的对比和部署差异，更详细内容请参考本站另外一篇文档 &lt;a href="https://www.xlabs.club/docs/platform/iam/" target="_blank" rel="noopener"&gt;统一身份认证&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;示例中的代码都是从真实环境拷贝经过检验的，但为了便于理解可能裁剪无关紧要的内容，完整的安装部署源码请参考我们的部署脚本 &lt;a href="https://github.com/xlabs-club/xlabs-ops" target="_blank" rel="noopener"&gt;xlabs-club/xlabs-ops&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;需要懂一些 K8S、OIDC 基础知识，此处只提供链接不展开说明。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="组件介绍"&gt;组件介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Keycloak&lt;/p&gt;
&lt;p&gt;Keycloak 是一个开源的身份和访问管理解决方案，支持 OAuth 2.0、OpenID Connect、SAML 等协议。它提供用户管理、角色管理、单点登录（SSO）、身份提供服务等功能，在本示例中担任 Auth Provider 角色。关于 Keycloak 的中文介绍，可参考本站单独的博客 &lt;a href="https://idaas.xlabs.club/" target="_blank" rel="noopener"&gt;IDaaS Book&lt;/a&gt;
。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/" target="_blank" rel="noopener"&gt;oauth2-proxy&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;顾名思义它是一个关于 oauth 反向代理，主要用来为后端服务增加身份验证层。它支持多种 OAuth 2.0 提供者（如 Google、OIDC、Keycloak 等），可以保护未提供身份验证的应用。oauth2-proxy 在请求进入后端服务之前，会先进行 OAuth 2.0 登录认证，确保请求者具有访问权限。它承担了登录的合法性校验、重定向、登录成功后的 cookie、response 设置等功能。&lt;/p&gt;</description></item></channel></rss>