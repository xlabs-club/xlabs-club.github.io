<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Idaas on XLabs</title><link>https://www.xlabs.club/tags/idaas/</link><description>Recent content in Idaas on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2025 XLabs Club</copyright><lastBuildDate>Thu, 25 Sep 2025 11:21:53 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/tags/idaas/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Security 集成 Keycloak 实现用户 RBAC、ABAC 授权</title><link>https://www.xlabs.club/blog/spring-security-with-keycloak-oauth2/</link><pubDate>Sun, 24 Nov 2024 16:44:35 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-security-with-keycloak-oauth2/</guid><description>&lt;p&gt;使用 Spring Security Resource Server 和 Keycloak，实现用户 RBAC、ABAC 授权，主要介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Security Resource Server 如何与标准 OAuth2 协议集成。&lt;/li&gt;
&lt;li&gt;Spring Security Resource Server 如何与 Keycloak Authorization Server 集成。&lt;/li&gt;
&lt;li&gt;如何校验和解析 JWT Token，获取用户详细信息。&lt;/li&gt;
&lt;li&gt;如何使用 keycloak admin client 获取更多信息，执行更高级动作。&lt;/li&gt;
&lt;li&gt;Spring Security JWT Token 模式下如何方便本地 Debug，如何通过 keycloak admin client 模拟用户登录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在开始之前我们先解释几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keycloak 官方的 Spring Boot Starter 后续将逐渐停止维护，所以我们只用 keycloak 的 client，自己实现一部分代码，有 client sdk 实现起来很容易。&lt;/li&gt;
&lt;li&gt;Spring Security &lt;a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html" target="_blank" rel="noopener"&gt;OAuth 2.0 Resource Server&lt;/a&gt;
 也有多种集成方式，这里我们只实现 &lt;code&gt;JWT&lt;/code&gt; 这一种，并且是 sessionless 的，也就是只负责授权不负责 &lt;code&gt;登录认证&lt;/code&gt;， 登录由网关通过 oauth2-proxy 实现，详情可参考另一篇博客介绍 &lt;a href="https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/" target="_blank" rel="noopener"&gt;traefik-oauth2-proxy-keycloak&lt;/a&gt;
。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Backstage 集成 oauth2-proxy 和 Keycloak，实现用户管理、登录认证以及 RBAC、ABAC 授权</title><link>https://www.xlabs.club/blog/backstage-keycloak-oauth2-proxy/</link><pubDate>Sat, 16 Nov 2024 16:55:26 +0800</pubDate><guid>https://www.xlabs.club/blog/backstage-keycloak-oauth2-proxy/</guid><description>&lt;p&gt;基于 K8S 部署 Backstage，集成 oauth2-proxy 和 Keycloak，实现用户管理、认证和授权，配置详解和原理介绍。&lt;/p&gt;
&lt;p&gt;如果你遇到以下问题或诉求，可以参考此文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://backstage.io/" target="_blank" rel="noopener"&gt;Backstage&lt;/a&gt;
 接入 oauth2-proxy，登录或认证失败。&lt;/li&gt;
&lt;li&gt;Backstage 实现 RBAC、ABAC 授权管理，以及如何实现自定义权限。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/" target="_blank" rel="noopener"&gt;oauth2-proxy&lt;/a&gt;
 对接 keycloak，参数不理解或者配置一直错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开始之前，我们先了解一个点，Backstage 官方开源有开箱即用的容器镜像，也有丰富的插件生态，然而区别于其他插件类应用，Backstage 有自己的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Backstage 插件分为 frontend 和 backend，一个完整的插件可能包含两种，也可能只包含其中一种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源发布的开箱即用的容器镜像，只包含基础插件，一般只用来作为初次学习使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想使用其他插件，需要做一些编码工作，一般步骤如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;npx @backstage/create-app@latest&lt;/code&gt; 创建一个基础项目。&lt;/li&gt;
&lt;li&gt;按插件要求安装插件，配置插件菜单、UI 效果、权限、认证信息等，每个插件要求不同。&lt;/li&gt;
&lt;li&gt;按需开发自己的插件。&lt;/li&gt;
&lt;li&gt;编译成新容器镜像，某些插件可能还需要在容器中额外安装一些依赖包，部署时使用此容器镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本上每个插件都有自己的配置要求，需根据插件文档配置 app-config.yaml。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以把 Backstage 类比于 Spring Boot，提供了 starter、framework、plugins，如果想真实使用，需要自己引入依赖，编译成自己的镜像发布部署，欢迎 star 我们基于 Backstage 定制的开源项目 &lt;a href="https://github.com/xlabs-club/xlabs-developer-platform" target="_blank" rel="noopener"&gt;xlabs-developer-platform&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;核心组件介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户同步使用 Red Hat 贡献的社区开源插件 &lt;a href="https://github.com/backstage/community-plugins/tree/main/workspaces/keycloak/plugins/catalog-backend-module-keycloak" target="_blank" rel="noopener"&gt;@backstage-community/plugin-catalog-backend-module-keycloak&lt;/a&gt;
，将 keycloak 用户同步到 Backstage 数据库，后面我们会提到为什么需要这一步。&lt;/li&gt;
&lt;li&gt;认证使用官方内置的 &lt;a href="https://backstage.io/docs/auth/oauth2-proxy/provider" target="_blank" rel="noopener"&gt;OAuth 2 Proxy Provider&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;授权，权限管理 Permissions，支持 RBAC、ABAC， 使用 Red Hat 贡献的社区开源插件 &lt;a href="https://github.com/backstage/community-plugins/tree/main/workspaces/rbac/plugins" target="_blank" rel="noopener"&gt;@backstage-community/plugin-rbac&lt;/a&gt;
，虽然插件名字叫 RBAC，但是实际上支持 ABAC。注意 Spotify 也有 &lt;a href="https://backstage.spotify.com/marketplace/spotify/plugin/rbac/" target="_blank" rel="noopener"&gt;RBAC 插件&lt;/a&gt;
 需要购买 License 才能用，两个插件别弄混了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上认证和授权是独立的，如果你只需要认证，不需要授权，那可以不需要 RBAC 插件。&lt;/p&gt;</description></item><item><title>使用 oauth2-proxy 为任意程序增加认证鉴权，结合 K8S、traefik、keycloak 部署配置详解</title><link>https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/</link><pubDate>Thu, 10 Oct 2024 23:30:40 +0800</pubDate><guid>https://www.xlabs.club/blog/traefik-oauth2-proxy-keycloak/</guid><description>&lt;p&gt;作为一个程序员，在日常开发中永远避免不了认证鉴权，而我们开发的某些应用，并不需要太复杂的鉴权，比如可能只要求必须是登录用户，或者只需要根据角色进行 RBAC 鉴权。有没有方法简化此流程，让应用开发者只关注业务开发，这就是本文档要解决的问题。&lt;/p&gt;
&lt;p&gt;如果你有类似以下的需求，都可以参考此文档，原理是一样的，组件也可复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为原本没有登录验证的服务提供认证服务，比如某些开源组件不支持认证但是又因携带一些危险数据而不想公开访问。&lt;/li&gt;
&lt;li&gt;实现统一的单点登录 SSO、并支持简单的 RBAC、UBAC 鉴权。&lt;/li&gt;
&lt;li&gt;为 Kubernetus Traefik Nginx Ingress 提供统一的认证入口，一键实现所有入口必须登录才可访问。&lt;/li&gt;
&lt;li&gt;配置 Traefik 使用 Forward Auth，Nginx 使用 auth_request 实现认证，也可以一并参考。&lt;/li&gt;
&lt;li&gt;在 K8S 或应用网关，基于用户、角色等不同属性，路由到不同服务。&lt;/li&gt;
&lt;li&gt;如果你凑巧也在用 &lt;a href="https://backstage.io/" target="_blank" rel="noopener"&gt;Backstage&lt;/a&gt;
，请参考 &lt;a href="https://www.xlabs.club/blog/backstage-oauth2-proxy-keycloak/" target="_blank" rel="noopener"&gt;另一篇博客&lt;/a&gt;
。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写在前面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本文档里的示例代码是以 k3s 为基础，使用 traefik 作为 ingress controller，整体完善但略显复杂，如果没有 K3S/K8S，以其他方式部署也是完全可以的，基本原理都是一样的。&lt;/li&gt;
&lt;li&gt;对于某些场景下可选的配置，会单独说明，请注意分别。&lt;/li&gt;
&lt;li&gt;这里提到的每个组件都是可替换的，比如 nginx 代替 traefik，Pomerium 代替 oauth2-proxy，可根据爱好选择，后面也会适当补充几种不同方式的对比和部署差异，更详细内容请参考本站另外一篇文档 &lt;a href="https://www.xlabs.club/docs/platform/iam/" target="_blank" rel="noopener"&gt;统一身份认证&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;示例中的代码都是从真实环境拷贝经过检验的，但为了便于理解可能裁剪无关紧要的内容，完整的安装部署源码请参考我们的部署脚本 &lt;a href="https://github.com/xlabs-club/xlabs-ops" target="_blank" rel="noopener"&gt;xlabs-club/xlabs-ops&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;需要懂一些 K8S、OIDC 基础知识，此处只提供链接不展开说明。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="组件介绍"&gt;组件介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Keycloak&lt;/p&gt;
&lt;p&gt;Keycloak 是一个开源的身份和访问管理解决方案，支持 OAuth 2.0、OpenID Connect、SAML 等协议。它提供用户管理、角色管理、单点登录（SSO）、身份提供服务等功能，在本示例中担任 Auth Provider 角色。关于 Keycloak 的中文介绍，可参考本站单独的博客 &lt;a href="https://idaas.xlabs.club/" target="_blank" rel="noopener"&gt;IDaaS Book&lt;/a&gt;
。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/" target="_blank" rel="noopener"&gt;oauth2-proxy&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;顾名思义它是一个关于 oauth 反向代理，主要用来为后端服务增加身份验证层。它支持多种 OAuth 2.0 提供者（如 Google、OIDC、Keycloak 等），可以保护未提供身份验证的应用。oauth2-proxy 在请求进入后端服务之前，会先进行 OAuth 2.0 登录认证，确保请求者具有访问权限。它承担了登录的合法性校验、重定向、登录成功后的 cookie、response 设置等功能。&lt;/p&gt;</description></item></channel></rss>